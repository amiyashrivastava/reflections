Q: When would you want to create a remote repository rather than keeping all your work local?

A: In big projects, where more than one developer are involved, it's better to keep the work on a remote server than on a local machine. That way the code base is accessible to everyone and at the same time you can keep your unfinished work on your local repository.


Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A: It may so happen that other developers have updated the same piece of code that I am working on and eventhough I am aware that they have done so, I am not ready yet to merge their changes with mine, and therefore, I want these changes to wait until I am ready else, the system will edit the file that I don't want it to edit at all.


Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?

A: Forks are clone on GitHub. Clones are clones on any machine - Git Hub to local or local to local. Branches are commits of same repository, they exist in parallel to each other. Forks are used to when we want to alter a product with no intention of merging it back to the original. Clones are just copies of a repository, they may eventually be merged to original. Branches are temporary versions of a repository. They still are versions of the main product.


Q: What is the benefit of having a copy of the last known state of the remote stored locally?

A: We can work offline to make and merge changes and then synch up when we are back online.


Q:How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A: Manual file exchange. Keeping track of versions manually. For a small project and few contributors probably the best but for big projects and large no of contributors, I'd easily lose track of changes with the manual approach.


Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A: Master branch is the productive branch and untested changes shouldn't be deployed directly there. Branches help prototype and test and when new features and bugs are working properly, then they can be merged with the master branch.


